/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WarehouseRouteImport } from './routes/warehouse'
import { Route as TestDatabaseRouteImport } from './routes/test-database'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as ProductsRouteImport } from './routes/products'
import { Route as ProductionRouteImport } from './routes/production'
import { Route as IngredientsRouteImport } from './routes/ingredients'
import { Route as FixedAssetsRouteImport } from './routes/fixed-assets'
import { Route as CogsRouteImport } from './routes/cogs'
import { Route as AccountRouteImport } from './routes/account'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ReportsIndexRouteImport } from './routes/reports/index'
import { Route as ReportsProfitRouteImport } from './routes/reports/profit'
import { Route as ReportsFinancialRouteImport } from './routes/reports/financial'
import { Route as ReportsCostsRouteImport } from './routes/reports/costs'

const WarehouseRoute = WarehouseRouteImport.update({
  id: '/warehouse',
  path: '/warehouse',
  getParentRoute: () => rootRouteImport,
} as any)
const TestDatabaseRoute = TestDatabaseRouteImport.update({
  id: '/test-database',
  path: '/test-database',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsRoute = ProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductionRoute = ProductionRouteImport.update({
  id: '/production',
  path: '/production',
  getParentRoute: () => rootRouteImport,
} as any)
const IngredientsRoute = IngredientsRouteImport.update({
  id: '/ingredients',
  path: '/ingredients',
  getParentRoute: () => rootRouteImport,
} as any)
const FixedAssetsRoute = FixedAssetsRouteImport.update({
  id: '/fixed-assets',
  path: '/fixed-assets',
  getParentRoute: () => rootRouteImport,
} as any)
const CogsRoute = CogsRouteImport.update({
  id: '/cogs',
  path: '/cogs',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountRoute = AccountRouteImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ReportsIndexRoute = ReportsIndexRouteImport.update({
  id: '/reports/',
  path: '/reports/',
  getParentRoute: () => rootRouteImport,
} as any)
const ReportsProfitRoute = ReportsProfitRouteImport.update({
  id: '/reports/profit',
  path: '/reports/profit',
  getParentRoute: () => rootRouteImport,
} as any)
const ReportsFinancialRoute = ReportsFinancialRouteImport.update({
  id: '/reports/financial',
  path: '/reports/financial',
  getParentRoute: () => rootRouteImport,
} as any)
const ReportsCostsRoute = ReportsCostsRouteImport.update({
  id: '/reports/costs',
  path: '/reports/costs',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/account': typeof AccountRoute
  '/cogs': typeof CogsRoute
  '/fixed-assets': typeof FixedAssetsRoute
  '/ingredients': typeof IngredientsRoute
  '/production': typeof ProductionRoute
  '/products': typeof ProductsRoute
  '/settings': typeof SettingsRoute
  '/test-database': typeof TestDatabaseRoute
  '/warehouse': typeof WarehouseRoute
  '/reports/costs': typeof ReportsCostsRoute
  '/reports/financial': typeof ReportsFinancialRoute
  '/reports/profit': typeof ReportsProfitRoute
  '/reports': typeof ReportsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/account': typeof AccountRoute
  '/cogs': typeof CogsRoute
  '/fixed-assets': typeof FixedAssetsRoute
  '/ingredients': typeof IngredientsRoute
  '/production': typeof ProductionRoute
  '/products': typeof ProductsRoute
  '/settings': typeof SettingsRoute
  '/test-database': typeof TestDatabaseRoute
  '/warehouse': typeof WarehouseRoute
  '/reports/costs': typeof ReportsCostsRoute
  '/reports/financial': typeof ReportsFinancialRoute
  '/reports/profit': typeof ReportsProfitRoute
  '/reports': typeof ReportsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/account': typeof AccountRoute
  '/cogs': typeof CogsRoute
  '/fixed-assets': typeof FixedAssetsRoute
  '/ingredients': typeof IngredientsRoute
  '/production': typeof ProductionRoute
  '/products': typeof ProductsRoute
  '/settings': typeof SettingsRoute
  '/test-database': typeof TestDatabaseRoute
  '/warehouse': typeof WarehouseRoute
  '/reports/costs': typeof ReportsCostsRoute
  '/reports/financial': typeof ReportsFinancialRoute
  '/reports/profit': typeof ReportsProfitRoute
  '/reports/': typeof ReportsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/account'
    | '/cogs'
    | '/fixed-assets'
    | '/ingredients'
    | '/production'
    | '/products'
    | '/settings'
    | '/test-database'
    | '/warehouse'
    | '/reports/costs'
    | '/reports/financial'
    | '/reports/profit'
    | '/reports'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/account'
    | '/cogs'
    | '/fixed-assets'
    | '/ingredients'
    | '/production'
    | '/products'
    | '/settings'
    | '/test-database'
    | '/warehouse'
    | '/reports/costs'
    | '/reports/financial'
    | '/reports/profit'
    | '/reports'
  id:
    | '__root__'
    | '/'
    | '/account'
    | '/cogs'
    | '/fixed-assets'
    | '/ingredients'
    | '/production'
    | '/products'
    | '/settings'
    | '/test-database'
    | '/warehouse'
    | '/reports/costs'
    | '/reports/financial'
    | '/reports/profit'
    | '/reports/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AccountRoute: typeof AccountRoute
  CogsRoute: typeof CogsRoute
  FixedAssetsRoute: typeof FixedAssetsRoute
  IngredientsRoute: typeof IngredientsRoute
  ProductionRoute: typeof ProductionRoute
  ProductsRoute: typeof ProductsRoute
  SettingsRoute: typeof SettingsRoute
  TestDatabaseRoute: typeof TestDatabaseRoute
  WarehouseRoute: typeof WarehouseRoute
  ReportsCostsRoute: typeof ReportsCostsRoute
  ReportsFinancialRoute: typeof ReportsFinancialRoute
  ReportsProfitRoute: typeof ReportsProfitRoute
  ReportsIndexRoute: typeof ReportsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/warehouse': {
      id: '/warehouse'
      path: '/warehouse'
      fullPath: '/warehouse'
      preLoaderRoute: typeof WarehouseRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/test-database': {
      id: '/test-database'
      path: '/test-database'
      fullPath: '/test-database'
      preLoaderRoute: typeof TestDatabaseRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products': {
      id: '/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/production': {
      id: '/production'
      path: '/production'
      fullPath: '/production'
      preLoaderRoute: typeof ProductionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ingredients': {
      id: '/ingredients'
      path: '/ingredients'
      fullPath: '/ingredients'
      preLoaderRoute: typeof IngredientsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/fixed-assets': {
      id: '/fixed-assets'
      path: '/fixed-assets'
      fullPath: '/fixed-assets'
      preLoaderRoute: typeof FixedAssetsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cogs': {
      id: '/cogs'
      path: '/cogs'
      fullPath: '/cogs'
      preLoaderRoute: typeof CogsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/account': {
      id: '/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/reports/': {
      id: '/reports/'
      path: '/reports'
      fullPath: '/reports'
      preLoaderRoute: typeof ReportsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/reports/profit': {
      id: '/reports/profit'
      path: '/reports/profit'
      fullPath: '/reports/profit'
      preLoaderRoute: typeof ReportsProfitRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/reports/financial': {
      id: '/reports/financial'
      path: '/reports/financial'
      fullPath: '/reports/financial'
      preLoaderRoute: typeof ReportsFinancialRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/reports/costs': {
      id: '/reports/costs'
      path: '/reports/costs'
      fullPath: '/reports/costs'
      preLoaderRoute: typeof ReportsCostsRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AccountRoute: AccountRoute,
  CogsRoute: CogsRoute,
  FixedAssetsRoute: FixedAssetsRoute,
  IngredientsRoute: IngredientsRoute,
  ProductionRoute: ProductionRoute,
  ProductsRoute: ProductsRoute,
  SettingsRoute: SettingsRoute,
  TestDatabaseRoute: TestDatabaseRoute,
  WarehouseRoute: WarehouseRoute,
  ReportsCostsRoute: ReportsCostsRoute,
  ReportsFinancialRoute: ReportsFinancialRoute,
  ReportsProfitRoute: ReportsProfitRoute,
  ReportsIndexRoute: ReportsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
